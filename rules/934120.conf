(?:  (?:##!(?: (?:http:(?:\/\/(?:(?:127.88.23.245:22(?:(?:\/+&\@google.com:80#+|\/?)\@|\/#\@www.)google.com:80\/|425.510.425.510\/ Dotted decimal with overflow) (already covered by RFI rule 931100)|[::ffff:a9fe:a9fe] IPV6 Compressed - IPv6 (base regex from https://ihateregex.io/expr/ipv6/, with [0-9] converted to \d and with non-capturing groups (below))|google.com:8(?:0+&\@(?:127.88.23.245:22\/#+\@google.com:80|google.com:80#+\@127.88.23.245:22)\/|0\\\@127.88.23.245:22\/ (already covered by RFI rule 931100))|\\l\\o\\c\\a\\l\\h\\o\\s\\t (while underscore is not valid RFC syntax, it is allowed and might be used)|[fe80::%zone1] link-local unicast with zone ID|[0:0:0:0:0:ffff:169.254.169.254] IPV6\/IPV4|[0:0:0:0:0:ffff:a9fe:a9fe] IPV6 Expanded|[::] the unspecified address)|//(?:0(?:x(?:A9(?:.0xFE.0xA9.0xFE/ Dotted|FEA9FE/ Dotless) hexadecimal|41414141A9FEA9FE/ Dotless hexadecimal with overflow)|251.0(?:0376.000251.0000376/ Dotted octal with padding|376.0251.0376/ Dotted octal))|7147006462/ Dotless decimal with overflow|169.(?:254.43518|16689662)/|2852039166/ Dotless decimal))|(?:Enclosed alphanumerics are used for evasion (https://en.wikipedia.org/wiki/Enclosed_Alphanumerics)|S(?:ee also https://github.com/cujanovic/SSRF-Testing|omething that looks like IPv6 in a URL)|Name Service Switch abuse above)|zone ID, and embedded IPv4).|These (?:bypasses work by confusing URL parsers in different languages (e.g., PHP, Python, Ruby, Perl)|will normally sound many alarms, but having them flagged as ssrf attempt makes sense|come from https://github.com/cujanovic/SSRF-Testing)|a(?:n(?:d libraries (e.g. cURL). The bypasses are parser specific but will often be combined to break| IP could start with digits and dots)|ctually increase the possibility for bypasses.)|(?:We could match the IPv6 specification here but that|decrease performance of the regular expression and) would|multiple parsers with one try. The goal is often to get the application to call another library|with the malicious URL, e.g. libcurl or glibc (name resolution via gethostbyname(), see also|(?:create ip-or-domain for later |glibc Name Service Switch ab)use|Matches full and compressed IPv6, link-local IPv6 with)|> (?:include url-schemes|assemble)|=>|<)| (?: (?:##!(?: (?:�(?:�(?:�,①,②,③,④,⑤,⑥,⑦,⑧,⑨,⑩,⑪,⑫,⑬,⑭,⑮,⑯,⑰,⑱,⑲,⑳|�,Ⓛ,Ⓜ,Ⓝ,Ⓞ,Ⓟ,Ⓠ,Ⓡ,Ⓢ,Ⓣ,Ⓤ,Ⓥ,Ⓦ,Ⓧ,Ⓨ,Ⓩ|�,ⓝ,ⓞ,ⓟ,ⓠ,ⓡ,ⓢ,ⓣ,ⓤ,ⓥ,ⓦ,ⓧ,ⓨ,ⓩ|�,ⓑ,ⓒ,ⓓ,ⓔ,ⓕ,ⓖ,ⓗ,ⓘ,ⓙ,ⓚ,ⓛ|�,⓵,⓶,⓷,⓸,⓹,⓺,⓻,⓼,⓽,⓾|�,⓬,⓭,⓮,⓯,⓰,⓱,⓲,⓳,⓴)|�(?:�,⒝,⒞,⒟,⒠,⒡,⒢,⒣,⒤,⒥,⒦,⒧,⒨,⒩,⒪,⒫,⒬,⒭,⒮,⒯,⒰,⒱,⒲,⒳,⒴,⒵|�,⒉,⒊,⒋,⒌,⒍,⒎,⒏,⒐,⒑,⒒,⒓,⒔,⒕,⒖,⒗,⒘,⒙,⒚,⒛|�,Ⓑ,Ⓒ,Ⓓ,Ⓔ,Ⓕ,Ⓖ,Ⓗ,Ⓘ,Ⓙ|�,⒁,⒂,⒃,⒄,⒅,⒆,⒇)|��,⑵,⑶,⑷,⑸,⑹,⑺,⑻,⑼,⑽,⑾,⑿)|at least one of the evasion techniques|ideographic full stop: 。|match all for capture|domain + port)|=(?:< (?:enclosed-alnums|ip-or-domain)|>)|> assemble|<)|�(?:�(?:[\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5]|[\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b]|[\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf]|[\x80\x81\x82\x83\x84\x85\x86\x87])|�(?:[\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f]|[\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9]|[\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b]|[\xbf\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe]|[\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4])|�(?:[\xaa\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3]|[\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf]))|  (?:  (?:#(?:#!(?: (?:&\@ to confuse URL parsers (& can indicate query parameter, @ indicates user info)|(?:possible white spaces to fool safety checks in|fragment to confuse) URL parsers|IPv4 + port or domain + port|optional forward slash)|=>(?: ip-or-domain)?))?|&?\@|\/\?|\/?|\s*)|##!(?:=> enclosed-alnums| technique [12]|> assemble|<))|[a-z][\w\-\.]{1,255}(?::\d{1,5})?|(?:\d{1,3}\.){3,3}\d{1,3}|[\d.]{0,11}|:\d{1,5}|。)| +)|(?:0x[a-f0-9]{2}\.){3}0x[a-f0-9]{2}|(?:0{1,4}\d{1,3}\.){3}0{1,4}\d{1,3}|\d{1,3}\.(?:\d{1,3}\.\d{5}|\d{8})|0x(?:[a-f0-9]{16}|[a-f0-9]{8})|\[[a-f\d:]+(?:[\d.]+|%\w+)?\]|(?:\x5c\x5c[a-z\d-]\.?_?)+|\d{10}|://)|##(?:!(?: (?:- https://github.com/(?:swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery|cujanovic/SSRF-Testing)|(?:This regex starts with a list of all the schemes that can be used to make a reques|Please refer to the documentation a)t|https://coreruleset.org/docs/development/regex_assembly/.|Bypasses and techniques here come from:)|> assemble|<)|!+ i))?
